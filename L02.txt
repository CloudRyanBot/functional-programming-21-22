Student: Bota Claudiu-Adrian
Group: 30431

2.2.1

fullTitle {firtName = "Haskell",idDR=True, lastName = "Curry"}
---------------------------------------------------------------------
2.3.1 Exercise

fullName (User "has" "cur")

----------------------------------------------------------------------
2.3.1 Question
type alias reminds me of "typedef", as both introduce a name which can be used as a synonim for the type denoted
----------------------------------------------------------------------

2.3.2

> type alias Address =
|   {street : String,
|   number: Int,
|   city : String,
|   country: String}

----------------------------------------------------------------------
2.3.3

> formatAddress : Address->String
| formatAddress a=a.street++" "++String.fromInt(a.number)++", "++a.city++", "++a.country
----------------------------------------------------------------------
2.5.1 
 Removing ( _ -> "Better luck next time" ) basically makes a function that cannot return anything when we put a number bigger than 3
Code does not compile
----------------------------------------------------------------------
2.5.2
if we swap, and we put ( _ -> "Better luck next time" ) as the first line, it basically makes the other cases useless, as this will be the first
thing checked by the compiler, thus making the function always return this text, no matter the number.
----------------------------------------------------------------------
Questions:
2.7.1
Cardinality(Bool) = 2
----------------------------------------------------------------------
2.7.2

I would define Int something like this:
type Int = 1 | 2 | 3 | ...
However, my idea is not a valid syntax, and it would take 2^32 cases until i finish the definition
----------------------------------------------------------------------
2.7.3
This question is a very interesting one, i was able to find on google a file that describes these questions:
https://thoughtbot.com/blog/types-without-values

Basically, i can create a type of cardinality 1, for example "type Direction = North", there is also "type Never", that has no values, and
we can also create one, where we define the type recursively, basically making the value of a type "an infinite job"(quote from article)
The last part of the article describes the uses of "phantom types", where we declare a type parameter, we never use it, but we care only about
the type in the signature and not the body, we can create types that can never be instantiated.
----------------------------------------------------------------------
Practice problems:

2.8.1

type Dice = One | Two | Three | Four | Five | Six
----------------------------------------------------------------------
2.8.2

type DicePair = DicePair Dice Dice
----------------------------------------------------------------------
2.8.3

luckyRoll : DicePair -> String
| luckyRoll (DicePair dice1 dice2) = case
|   (dice1 == Six, dice2==Six) of
|   (True, True) -> "Very lucky"
|   (True, False) -> "Lucky"
|   (False, True) -> "Lucky"
|   (False, False) -> "Meh"
----------------------------------------------------------------------
2.8.4

areaRec : ShapeRec -> Float 
areaRec shape = 
case shape of 
   CircleRec {radius} -> pi * radius * radius 
   RectangleRec {width, height} -> width * height 
   TriangleRec {sideA, sideB, sideC} -> heron sideA sideB sideC  

----------------------------------------------------------------------
2.8.5


----------------------------------------------------------------------
2.8.6


----------------------------------------------------------------------
