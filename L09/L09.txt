9.4.1

l = 1 : 3 : 5 : _
------------------------------------
9.4.2

l = 1 : 10 : 19 : 28 : 37 : 46 : 55 : 64 : 73 : 82 : 91 : 100 :
    109 : 118 : 127 : 136 : 145 : 154 : 163 : 172 : 181 : 190 : _
------------------------------------
9.5.1

I was able to guess correctly the more obvious named functions, such as
"twos", "fibs", "count", "powsOf2", "primes". I was unsure about "oneList",
but I got it right in the end. The only one I didn't get was "rep", because I
didn't understand it at first, then I realised what the function does.
------------------------------------
9.5.2
fibs = 0:1:(zipWith (+) fibs (tail fibs))
fibs = 0:1:(zipWith (+) [0,1] (tail [0,1]))
[0,1,1]

PowsOf2
    2:(map (*2) (2: (map (*2) (2: (map (*2) powsOf2)))))
    2:(map (*2) (2:[4]))
    2:[4,8]
    [2,4,8]

primes = sieve [2..5] where sieve (x:xs) = x:sieve [ y | y <- xs, mod y x /= 0] 
take 3 primes
[2,3,5]

** without "take 3", primes alone shows first 3 elements, and then shows an exception error

------------------------------------
9.8.1

cycl :: [a] -> [a]
cycl [] = []
cycl lst = lst ++ cycl lst
------------------------------------
9.8.2

series :: [[Int]]
series = generateSeries 1 where 
    generateSeries n = decSeries n [] : generateSeries (n+1)
    decSeries n acc 
        | n == 0 = acc
        | otherwise = decSeries (n-1) (acc ++ [n]) 
