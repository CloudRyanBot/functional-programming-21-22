-- 12.1.1

satisfies :: (Char -> Bool) -> Parser Char
satisfies predicate = Parser inner where
  inner "" = Error "End of input"
  inner (first:rest) = 
    if predicate first then
      Success first rest
    else
      Error ("Unexpected character " ++ show first)

-- 12.1.2

digit :: Parser Char
digit = satisfies (\c -> c `elem` ['0'..'9'])

-- 12.2.1 //not good

string' :: String -> Parser String
string' "" = Parser (\input -> Success "" input)
string' (c:cs) = Parser inner where
  inner "" = Error "End of input"
  inner input =
    case runParser (andThen (char c) (string cs) ) input of
      Success (p, ps) rest -> Success (p:ps) rest
      Error err -> Error err


-- 12.2.2

pMap :: (a -> b) -> Parser a -> Parser b
pMap f p = Parser inner where
  inner "" = Error "End of input"
  inner input = 
    case runParser p input of
      Success r rest -> Success (f r) rest
      Error err -> Error err
      
some :: Parser a -> Parser [a]
some p = Parser inner where
  inner "" = Error "End of input"
  inner input =
    case runParser p input of
      Success r rest ->
        case runParser (many p) rest of
          Success rs remaining -> Success (r:rs) remaining
      Error err -> Error err
     
     
number :: Parser Int
number = pMap read (some digit)


-- 12.3.1

pThen :: Parser a -> Parser b -> Parser b
pThen pa pb = Parser inner where 
  inner "" = Error "End of input"
  inner input = 
    case runParser pa input of 
      Success _ rest -> runParser pb rest 
      Error err -> Error err
